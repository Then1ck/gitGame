package main;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;

import camera.Camera;
import controls.KeyboardInput;
import entities.Player;
import terrain.Floor;
import terrain.Wall;

@SuppressWarnings("serial")
public class Panel extends JPanel implements Runnable {
	
	private BufferedImage img = null;

	private int ScreenWidth=1280, ScreenHeight=720;
	private JFrame Window;
	private boolean Fullscreen = false;
	
	private Thread gameThread = null;
	
	private int FPS = 60;
	
	private KeyboardInput keys;
	
	private Player p1 = new Player(0, 0, 32, 64);
	private ArrayList<Floor> floors = new ArrayList<Floor>();
	private ArrayList<Wall> walls = new ArrayList<Wall>();
	
	private Camera cams = null;
	
	public Panel() {
		this.setPreferredSize(new Dimension(ScreenWidth, ScreenHeight));
		this.setBackground(Color.black);
		
		this.setDoubleBuffered(true);
		this.setFocusable(true);
		
		try {
			img = ImageIO.read(getClass().getResourceAsStream("/icon/Screenshot (3719).png"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		Window = Main.getWindow(this, Fullscreen, img);
		
		keys = new KeyboardInput();
		this.addKeyListener(keys);
		
		floors.add(new Floor(0, 640, 700));
		floors.add(new Floor(640, 1280, 500));
		floors.add(new Floor(0, 640, 300));
		
		walls.add(new Wall(0, 720, 0));
		
		walls.add(new Wall(200, 300, 640));
		
		floors.add(new Floor(640, 640, 200));
		
		floors.add(new Floor(0, 1280, 720));
		walls.add(new Wall(0, 720, 1280));
		
		cams = new Camera(p1);
		
		startGameThread();
	}
	
	public void startGameThread() {
		gameThread = new Thread(this);
		gameThread.start();
	}
	
	public void newWindow() {
		Window.dispose();
		Window = Main.getWindow(this, Fullscreen, img);
	}
	
	public void update() {
//		System.out.println(p1.getVelX());
		
		boolean Move = false;
		if(keys.getKeyHeld(KeyEvent.VK_D)) {
			p1.walk(1);
			Move = !Move;
		}
		if(keys.getKeyHeld(KeyEvent.VK_A)) {
			p1.walk(-1);
			Move = !Move;
		}
		if(!Move)p1.slow();
		
		if(p1.getGrounded()) {
			if(keys.getKeyPressed(KeyEvent.VK_SPACE))p1.startJump();
		}
		else {
			if(keys.getKeyHeld(KeyEvent.VK_SPACE))p1.contJump();
			else p1.setJTimer(0);
		}
		
		if(keys.getKeyHeld(KeyEvent.VK_SHIFT))p1.startRun();
		else p1.stopRun();
		
		if(keys.getKeyHeld(KeyEvent.VK_S)) {
			p1.duck();
		}else if(p1.getDuck())p1.stand();
		
		p1.fall();
		
		p1.move();
		
		for(Wall wls : walls) {
			switch(wls.collide(p1)) {
			case -1:
				p1.setLocX(wls.getX()-p1.getWidth()-1);
				p1.setVelX(0);
				break;
			case 1:
				p1.setLocX(wls.getX()+1);
				p1.setVelX(0);
				break;
			}
		}
		
		p1.setGrounded(false);
		for(Floor flr : floors) {
			if(flr.lands(p1)) {
				p1.landing(flr.getY());
				break;
			}
		}
		
		
		cams.camChase();
		
		keys.reset();
	}
	
	public void paintComponent(Graphics g) {
		super.paintComponent(g);
		
		Graphics2D g2 = (Graphics2D) g;
		
		cams.setCam(g2);
		
		p1.draw(g2);
		
		g2.setColor(Color.BLUE);
		for(Floor flr : floors) {
			flr.draw(g2);
		}
		
		g2.setColor(Color.BLUE);
		for(Wall wl : walls) {
			wl.draw(g2);
		}
	}
	
	@Override
	public void run() {
		double drawSpeed = 1000000000/FPS;
		long last = System.nanoTime();
		long now = System.nanoTime();
		
		double delta = 0;
		
		while(gameThread!=null) {
			now = System.nanoTime();
			delta += (now-last)/drawSpeed;
			last = now;
			if(delta >= 1) {
				delta--;
				update();
				repaint();
			}
		}
	}

}
